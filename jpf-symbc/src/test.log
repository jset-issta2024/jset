Mixed symbolic/concrete execution ...
Running Symbolic PathFinder ...
symbolic.dp=z3bitvector
symbolic.string_dp_timeout_ms=0
symbolic.string_dp=none
symbolic.concolic=true
symbolic.max_pc_length=2147483647
symbolic.max_pc_msec=0
symbolic.bvlength=64
symbolic.min_int=-2147483648
symbolic.min_long=-9223372036854775808
symbolic.min_short=-32768
symbolic.min_byte=-128
symbolic.min_char=0
symbolic.max_int=2147483647
symbolic.max_long=9223372036854775807
symbolic.max_short=32767
symbolic.max_byte=127
symbolic.max_char=65535
symbolic.min_double=4.9E-324
symbolic.max_double=1.7976931348623157E308
JavaPathfinder core system v8.0 - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
test.xml.TestXml.main()

====================================================== search started: 4/14/22 1:21 PM
New sym int symC0 min=0, max=65535
New sym int symC1 min=0, max=65535
New sym int symC2 min=0, max=65535
New sym int symC3 min=0, max=65535
New sym int symC4 min=0, max=65535
New sym int symC5 min=0, max=65535
New sym int symC6 min=0, max=65535
New sym int symC7 min=0, max=65535
--------original PC------------0
original pc constraint # = 1
symC0 == CONST_-1
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 1
symC0 == CONST_-1
concolicPC constraint # = 0
simplePC constraint # = 1
symC0 == CONST_-1
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (= symC0 #xffffffffffffffff))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 1
symC0 == CONST_-1 -> false

string analysis: SPC # = 0
NPC constraint # = 1
symC0[-9223372036854775808] == CONST_-1
### PCs: total:1 sat:0 unsat:1

--------original PC------------0
original pc constraint # = 1
symC0[-9223372036854775808] != CONST_-1
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 1
symC0[-9223372036854775808] != CONST_-1
concolicPC constraint # = 0
simplePC constraint # = 1
symC0[-9223372036854775808] != CONST_-1
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= symC0 #xffffffffffffffff)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 1
symC0[-9223372036854775808] != CONST_-1 -> true

string analysis: SPC # = 0
NPC constraint # = 1
symC0[0] != CONST_-1
### PCs: total:2 sat:1 unsat:1

string analysis: SPC # = 0
NPC constraint # = 1
symC0[0] != CONST_-1
--------original PC------------0
original pc constraint # = 1
symC0 == CONST_-1
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 1
symC0 == CONST_-1
concolicPC constraint # = 0
simplePC constraint # = 1
symC0 == CONST_-1
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (= symC0 #xffffffffffffffff))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 1
symC0 == CONST_-1 -> false

string analysis: SPC # = 0
NPC constraint # = 1
symC0[0] == CONST_-1
### PCs: total:3 sat:1 unsat:2

--------original PC------------0
original pc constraint # = 1
symC0[0] != CONST_-1
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 1
symC0[0] != CONST_-1
concolicPC constraint # = 0
simplePC constraint # = 1
symC0[0] != CONST_-1
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= symC0 #xffffffffffffffff)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 1
symC0[0] != CONST_-1 -> true

string analysis: SPC # = 0
NPC constraint # = 1
symC0[0] != CONST_-1
### PCs: total:4 sat:2 unsat:2

string analysis: SPC # = 0
NPC constraint # = 1
symC0[0] != CONST_-1
--------original PC------------0
original pc constraint # = 12
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 12
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 12
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 12
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 -> true

string analysis: SPC # = 0
NPC constraint # = 12
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93
### PCs: total:5 sat:3 unsat:2

string analysis: SPC # = 0
NPC constraint # = 12
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 12
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 12
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 12
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 12
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 -> true

string analysis: SPC # = 0
NPC constraint # = 12
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93
### PCs: total:6 sat:4 unsat:2

string analysis: SPC # = 0
NPC constraint # = 12
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 13
(symC0[0] & CONST_65535) == CONST_32 &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 13
(symC0[0] & CONST_65535) == CONST_32 &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) == CONST_32
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (= (bvand #x000000000000ffff symC0) #x0000000000000020))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) == CONST_32 -> false

string analysis: SPC # = 0
NPC constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) == CONST_32
### PCs: total:7 sat:4 unsat:3

--------original PC------------0
original pc constraint # = 13
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 13
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 13
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 13
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535)
### PCs: total:8 sat:5 unsat:3

string analysis: SPC # = 0
NPC constraint # = 13
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 13
CONST_97 <= (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 13
CONST_97 <= (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[0] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 13
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[0] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 13
(symC0[32768] & CONST_65535) != CONST_32 &&
(symC0[32768] & CONST_65535) != CONST_33 &&
(symC0[32768] & CONST_65535) != CONST_34 &&
(symC0[32768] & CONST_65535) != CONST_39 &&
(symC0[32768] & CONST_65535) != CONST_45 &&
(symC0[32768] & CONST_65535) != CONST_47 &&
(symC0[32768] & CONST_65535) != CONST_60 &&
(symC0[32768] & CONST_65535) != CONST_61 &&
(symC0[32768] & CONST_65535) != CONST_62 &&
(symC0[32768] & CONST_65535) != CONST_63 &&
(symC0[32768] & CONST_65535) != CONST_91 &&
(symC0[32768] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[32768] & CONST_65535)
### PCs: total:9 sat:6 unsat:3

string analysis: SPC # = 0
NPC constraint # = 13
CONST_97 <= (symC0[32768] & CONST_65535) &&
(symC0[32768] & CONST_65535) != CONST_93 &&
(symC0[32768] & CONST_65535) != CONST_91 &&
(symC0[32768] & CONST_65535) != CONST_63 &&
(symC0[32768] & CONST_65535) != CONST_62 &&
(symC0[32768] & CONST_65535) != CONST_61 &&
(symC0[32768] & CONST_65535) != CONST_60 &&
(symC0[32768] & CONST_65535) != CONST_47 &&
(symC0[32768] & CONST_65535) != CONST_45 &&
(symC0[32768] & CONST_65535) != CONST_39 &&
(symC0[32768] & CONST_65535) != CONST_34 &&
(symC0[32768] & CONST_65535) != CONST_33 &&
(symC0[32768] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 14
(symC0 & CONST_65535) <= CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 14
(symC0 & CONST_65535) <= CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 14
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) <= CONST_122
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle (bvand #x000000000000ffff symC0) #x000000000000007a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 14
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) <= CONST_122 -> true

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[102] & CONST_65535) != CONST_32 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) <= CONST_122
### PCs: total:10 sat:7 unsat:3

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[102] & CONST_65535) <= CONST_122 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) != CONST_93 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 14
(symC0[102] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) != CONST_93 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 14
(symC0[102] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) != CONST_93 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 14
(symC0[102] & CONST_65535) != CONST_32 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) > CONST_122
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 14
(symC0[102] & CONST_65535) != CONST_32 &&
(symC0[102] & CONST_65535) != CONST_33 &&
(symC0[102] & CONST_65535) != CONST_34 &&
(symC0[102] & CONST_65535) != CONST_39 &&
(symC0[102] & CONST_65535) != CONST_45 &&
(symC0[102] & CONST_65535) != CONST_47 &&
(symC0[102] & CONST_65535) != CONST_60 &&
(symC0[102] & CONST_65535) != CONST_61 &&
(symC0[102] & CONST_65535) != CONST_62 &&
(symC0[102] & CONST_65535) != CONST_63 &&
(symC0[102] & CONST_65535) != CONST_91 &&
(symC0[102] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[102] & CONST_65535) &&
(symC0[102] & CONST_65535) > CONST_122 -> true

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122
### PCs: total:11 sat:8 unsat:3

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
CONST_65 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_65 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_65 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_65 > (symC0 & CONST_65535) -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_65 > (symC0[126] & CONST_65535)
### PCs: total:12 sat:8 unsat:4

--------original PC------------0
original pc constraint # = 15
CONST_65 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_65 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_65 <= (symC0[126] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_65 <= (symC0[126] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[32832] & CONST_65535) != CONST_32 &&
(symC0[32832] & CONST_65535) != CONST_33 &&
(symC0[32832] & CONST_65535) != CONST_34 &&
(symC0[32832] & CONST_65535) != CONST_39 &&
(symC0[32832] & CONST_65535) != CONST_45 &&
(symC0[32832] & CONST_65535) != CONST_47 &&
(symC0[32832] & CONST_65535) != CONST_60 &&
(symC0[32832] & CONST_65535) != CONST_61 &&
(symC0[32832] & CONST_65535) != CONST_62 &&
(symC0[32832] & CONST_65535) != CONST_63 &&
(symC0[32832] & CONST_65535) != CONST_91 &&
(symC0[32832] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[32832] & CONST_65535) &&
(symC0[32832] & CONST_65535) > CONST_122 &&
CONST_65 <= (symC0[32832] & CONST_65535)
### PCs: total:13 sat:9 unsat:4

string analysis: SPC # = 0
NPC constraint # = 15
CONST_65 <= (symC0[32832] & CONST_65535) &&
(symC0[32832] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[32832] & CONST_65535) &&
(symC0[32832] & CONST_65535) != CONST_93 &&
(symC0[32832] & CONST_65535) != CONST_91 &&
(symC0[32832] & CONST_65535) != CONST_63 &&
(symC0[32832] & CONST_65535) != CONST_62 &&
(symC0[32832] & CONST_65535) != CONST_61 &&
(symC0[32832] & CONST_65535) != CONST_60 &&
(symC0[32832] & CONST_65535) != CONST_47 &&
(symC0[32832] & CONST_65535) != CONST_45 &&
(symC0[32832] & CONST_65535) != CONST_39 &&
(symC0[32832] & CONST_65535) != CONST_34 &&
(symC0[32832] & CONST_65535) != CONST_33 &&
(symC0[32832] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) > CONST_90
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) > CONST_90 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) > CONST_90
### PCs: total:14 sat:10 unsat:4

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) > CONST_90 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0[126] & CONST_65535) <= CONST_90 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[126] & CONST_65535) <= CONST_90 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_90
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsle (bvand #x000000000000ffff symC0) #x000000000000005a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_90 -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_90
### PCs: total:15 sat:10 unsat:5

--------original PC------------0
original pc constraint # = 15
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_48 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_48 > (symC0 & CONST_65535) -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_48 > (symC0[126] & CONST_65535)
### PCs: total:16 sat:10 unsat:6

--------original PC------------0
original pc constraint # = 15
CONST_48 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_48 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_48 <= (symC0[126] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_48 <= (symC0[126] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[32782] & CONST_65535) != CONST_32 &&
(symC0[32782] & CONST_65535) != CONST_33 &&
(symC0[32782] & CONST_65535) != CONST_34 &&
(symC0[32782] & CONST_65535) != CONST_39 &&
(symC0[32782] & CONST_65535) != CONST_45 &&
(symC0[32782] & CONST_65535) != CONST_47 &&
(symC0[32782] & CONST_65535) != CONST_60 &&
(symC0[32782] & CONST_65535) != CONST_61 &&
(symC0[32782] & CONST_65535) != CONST_62 &&
(symC0[32782] & CONST_65535) != CONST_63 &&
(symC0[32782] & CONST_65535) != CONST_91 &&
(symC0[32782] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[32782] & CONST_65535) &&
(symC0[32782] & CONST_65535) > CONST_122 &&
CONST_48 <= (symC0[32782] & CONST_65535)
### PCs: total:17 sat:11 unsat:6

string analysis: SPC # = 0
NPC constraint # = 15
CONST_48 <= (symC0[32782] & CONST_65535) &&
(symC0[32782] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[32782] & CONST_65535) &&
(symC0[32782] & CONST_65535) != CONST_93 &&
(symC0[32782] & CONST_65535) != CONST_91 &&
(symC0[32782] & CONST_65535) != CONST_63 &&
(symC0[32782] & CONST_65535) != CONST_62 &&
(symC0[32782] & CONST_65535) != CONST_61 &&
(symC0[32782] & CONST_65535) != CONST_60 &&
(symC0[32782] & CONST_65535) != CONST_47 &&
(symC0[32782] & CONST_65535) != CONST_45 &&
(symC0[32782] & CONST_65535) != CONST_39 &&
(symC0[32782] & CONST_65535) != CONST_34 &&
(symC0[32782] & CONST_65535) != CONST_33 &&
(symC0[32782] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) > CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) > CONST_57 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) > CONST_57
### PCs: total:18 sat:12 unsat:6

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) > CONST_57 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0[126] & CONST_65535) <= CONST_57 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[126] & CONST_65535) <= CONST_57 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (bvsle (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_57 -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) <= CONST_57
### PCs: total:19 sat:12 unsat:7

--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) == CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000002e))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) == CONST_46 -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) == CONST_46
### PCs: total:20 sat:12 unsat:8

--------original PC------------0
original pc constraint # = 15
(symC0[126] & CONST_65535) != CONST_46 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_46 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_46 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_46
### PCs: total:21 sat:13 unsat:8

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_46 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) == CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000005f))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) == CONST_95 -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) == CONST_95
### PCs: total:22 sat:13 unsat:9

--------original PC------------0
original pc constraint # = 15
(symC0[126] & CONST_65535) != CONST_95 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_95 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_95 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_95
### PCs: total:23 sat:14 unsat:9

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_95 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) != CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003a)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_122 &&
(symC0 & CONST_65535) != CONST_58 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) != CONST_58
### PCs: total:24 sat:15 unsat:9

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_58 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0[126] & CONST_65535) == CONST_58 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[126] & CONST_65535) == CONST_58 &&
(symC0[126] & CONST_65535) > CONST_122 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) != CONST_93 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) == CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsle #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000007a))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000003a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) == CONST_58 -> false

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[126] & CONST_65535) != CONST_32 &&
(symC0[126] & CONST_65535) != CONST_33 &&
(symC0[126] & CONST_65535) != CONST_34 &&
(symC0[126] & CONST_65535) != CONST_39 &&
(symC0[126] & CONST_65535) != CONST_45 &&
(symC0[126] & CONST_65535) != CONST_47 &&
(symC0[126] & CONST_65535) != CONST_60 &&
(symC0[126] & CONST_65535) != CONST_61 &&
(symC0[126] & CONST_65535) != CONST_62 &&
(symC0[126] & CONST_65535) != CONST_63 &&
(symC0[126] & CONST_65535) != CONST_91 &&
(symC0[126] & CONST_65535) != CONST_93 &&
CONST_97 <= (symC0[126] & CONST_65535) &&
(symC0[126] & CONST_65535) > CONST_122 &&
(symC0[126] & CONST_65535) == CONST_58
### PCs: total:25 sat:15 unsat:10

--------original PC------------0
original pc constraint # = 14
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 14
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 14
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 14
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535)
### PCs: total:26 sat:16 unsat:10

string analysis: SPC # = 0
NPC constraint # = 14
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 14
CONST_65 <= (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 14
CONST_65 <= (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 14
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 <= (symC0[0] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 14
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 <= (symC0[0] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 14
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535)
### PCs: total:27 sat:17 unsat:10

string analysis: SPC # = 0
NPC constraint # = 14
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90
### PCs: total:28 sat:18 unsat:10

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
(symC0[94] & CONST_65535) <= CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
(symC0[94] & CONST_65535) <= CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) <= CONST_90
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle (bvand #x000000000000ffff symC0) #x000000000000005a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) <= CONST_90 -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[78] & CONST_65535) != CONST_32 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[78] & CONST_65535) &&
CONST_65 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) <= CONST_90
### PCs: total:29 sat:19 unsat:10

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[78] & CONST_65535) <= CONST_90 &&
CONST_65 <= (symC0[78] & CONST_65535) &&
CONST_97 > (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) != CONST_93 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_48 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_48 > (symC0 & CONST_65535) -> false

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[78] & CONST_65535) != CONST_32 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[78] & CONST_65535) &&
CONST_65 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) > CONST_90 &&
CONST_48 > (symC0[78] & CONST_65535)
### PCs: total:30 sat:19 unsat:11

--------original PC------------0
original pc constraint # = 16
CONST_48 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[78] & CONST_65535) &&
CONST_97 > (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) != CONST_93 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
CONST_48 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[78] & CONST_65535) &&
CONST_97 > (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) != CONST_93 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[78] & CONST_65535) != CONST_32 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[78] & CONST_65535) &&
CONST_65 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) > CONST_90 &&
CONST_48 <= (symC0[78] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[78] & CONST_65535) != CONST_32 &&
(symC0[78] & CONST_65535) != CONST_33 &&
(symC0[78] & CONST_65535) != CONST_34 &&
(symC0[78] & CONST_65535) != CONST_39 &&
(symC0[78] & CONST_65535) != CONST_45 &&
(symC0[78] & CONST_65535) != CONST_47 &&
(symC0[78] & CONST_65535) != CONST_60 &&
(symC0[78] & CONST_65535) != CONST_61 &&
(symC0[78] & CONST_65535) != CONST_62 &&
(symC0[78] & CONST_65535) != CONST_63 &&
(symC0[78] & CONST_65535) != CONST_91 &&
(symC0[78] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[78] & CONST_65535) &&
CONST_65 <= (symC0[78] & CONST_65535) &&
(symC0[78] & CONST_65535) > CONST_90 &&
CONST_48 <= (symC0[78] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_48 <= (symC0[94] & CONST_65535)
### PCs: total:31 sat:20 unsat:11

string analysis: SPC # = 0
NPC constraint # = 16
CONST_48 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) > CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) > CONST_57 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) > CONST_57
### PCs: total:32 sat:21 unsat:11

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[96] & CONST_65535) > CONST_57 &&
(symC0[96] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0[96] & CONST_65535) <= CONST_57 &&
(symC0[96] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0[96] & CONST_65535) <= CONST_57 &&
(symC0[96] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) <= CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (bvsle (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) <= CONST_57 -> false

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) <= CONST_57
### PCs: total:33 sat:21 unsat:12

--------original PC------------0
original pc constraint # = 16
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) == CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000002e))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) == CONST_46 -> false

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) == CONST_46
### PCs: total:34 sat:21 unsat:13

--------original PC------------0
original pc constraint # = 16
(symC0[96] & CONST_65535) != CONST_46 &&
(symC0[96] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0[96] & CONST_65535) != CONST_46 &&
(symC0[96] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[96] & CONST_65535) &&
CONST_97 > (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) != CONST_93 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) != CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[96] & CONST_65535) != CONST_32 &&
(symC0[96] & CONST_65535) != CONST_33 &&
(symC0[96] & CONST_65535) != CONST_34 &&
(symC0[96] & CONST_65535) != CONST_39 &&
(symC0[96] & CONST_65535) != CONST_45 &&
(symC0[96] & CONST_65535) != CONST_47 &&
(symC0[96] & CONST_65535) != CONST_60 &&
(symC0[96] & CONST_65535) != CONST_61 &&
(symC0[96] & CONST_65535) != CONST_62 &&
(symC0[96] & CONST_65535) != CONST_63 &&
(symC0[96] & CONST_65535) != CONST_91 &&
(symC0[96] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[96] & CONST_65535) &&
CONST_65 <= (symC0[96] & CONST_65535) &&
(symC0[96] & CONST_65535) > CONST_90 &&
(symC0[96] & CONST_65535) != CONST_46 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_46
### PCs: total:35 sat:22 unsat:13

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[94] & CONST_65535) != CONST_46 &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) == CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000005f))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) == CONST_95 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[95] & CONST_65535) != CONST_32 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[95] & CONST_65535) &&
CONST_65 <= (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) > CONST_90 &&
(symC0[95] & CONST_65535) == CONST_95
### PCs: total:36 sat:23 unsat:13

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[95] & CONST_65535) == CONST_95 &&
(symC0[95] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[95] & CONST_65535) &&
CONST_97 > (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) != CONST_93 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0[95] & CONST_65535) != CONST_95 &&
(symC0[95] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[95] & CONST_65535) &&
CONST_97 > (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) != CONST_93 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0[95] & CONST_65535) != CONST_95 &&
(symC0[95] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[95] & CONST_65535) &&
CONST_97 > (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) != CONST_93 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[95] & CONST_65535) != CONST_32 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[95] & CONST_65535) &&
CONST_65 <= (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) > CONST_90 &&
(symC0[95] & CONST_65535) != CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[95] & CONST_65535) != CONST_32 &&
(symC0[95] & CONST_65535) != CONST_33 &&
(symC0[95] & CONST_65535) != CONST_34 &&
(symC0[95] & CONST_65535) != CONST_39 &&
(symC0[95] & CONST_65535) != CONST_45 &&
(symC0[95] & CONST_65535) != CONST_47 &&
(symC0[95] & CONST_65535) != CONST_60 &&
(symC0[95] & CONST_65535) != CONST_61 &&
(symC0[95] & CONST_65535) != CONST_62 &&
(symC0[95] & CONST_65535) != CONST_63 &&
(symC0[95] & CONST_65535) != CONST_91 &&
(symC0[95] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[95] & CONST_65535) &&
CONST_65 <= (symC0[95] & CONST_65535) &&
(symC0[95] & CONST_65535) > CONST_90 &&
(symC0[95] & CONST_65535) != CONST_95 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_95
### PCs: total:37 sat:24 unsat:13

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) != CONST_95 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) != CONST_95 &&
(symC0 & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) != CONST_95 &&
(symC0 & CONST_65535) != CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003a)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_90 &&
(symC0 & CONST_65535) != CONST_95 &&
(symC0 & CONST_65535) != CONST_58 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) != CONST_58
### PCs: total:38 sat:25 unsat:13

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[94] & CONST_65535) != CONST_58 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0[94] & CONST_65535) == CONST_58 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[94] & CONST_65535) == CONST_58 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) > CONST_90 &&
CONST_65 <= (symC0[94] & CONST_65535) &&
CONST_97 > (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) != CONST_93 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) == CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x000000000000005a))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000003a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) == CONST_58 -> false

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[94] & CONST_65535) != CONST_32 &&
(symC0[94] & CONST_65535) != CONST_33 &&
(symC0[94] & CONST_65535) != CONST_34 &&
(symC0[94] & CONST_65535) != CONST_39 &&
(symC0[94] & CONST_65535) != CONST_45 &&
(symC0[94] & CONST_65535) != CONST_47 &&
(symC0[94] & CONST_65535) != CONST_60 &&
(symC0[94] & CONST_65535) != CONST_61 &&
(symC0[94] & CONST_65535) != CONST_62 &&
(symC0[94] & CONST_65535) != CONST_63 &&
(symC0[94] & CONST_65535) != CONST_91 &&
(symC0[94] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[94] & CONST_65535) &&
CONST_65 <= (symC0[94] & CONST_65535) &&
(symC0[94] & CONST_65535) > CONST_90 &&
(symC0[94] & CONST_65535) != CONST_95 &&
(symC0[94] & CONST_65535) == CONST_58
### PCs: total:39 sat:25 unsat:14

--------original PC------------0
original pc constraint # = 15
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535)
### PCs: total:40 sat:26 unsat:14

string analysis: SPC # = 0
NPC constraint # = 15
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 15
CONST_48 <= (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 15
CONST_48 <= (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 15
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 <= (symC0[0] & CONST_65535)
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 15
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 <= (symC0[0] & CONST_65535) -> true

string analysis: SPC # = 0
NPC constraint # = 15
(symC0[64] & CONST_65535) != CONST_32 &&
(symC0[64] & CONST_65535) != CONST_33 &&
(symC0[64] & CONST_65535) != CONST_34 &&
(symC0[64] & CONST_65535) != CONST_39 &&
(symC0[64] & CONST_65535) != CONST_45 &&
(symC0[64] & CONST_65535) != CONST_47 &&
(symC0[64] & CONST_65535) != CONST_60 &&
(symC0[64] & CONST_65535) != CONST_61 &&
(symC0[64] & CONST_65535) != CONST_62 &&
(symC0[64] & CONST_65535) != CONST_63 &&
(symC0[64] & CONST_65535) != CONST_91 &&
(symC0[64] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[64] & CONST_65535) &&
CONST_65 > (symC0[64] & CONST_65535) &&
CONST_48 <= (symC0[64] & CONST_65535)
### PCs: total:41 sat:27 unsat:14

string analysis: SPC # = 0
NPC constraint # = 15
CONST_48 <= (symC0[64] & CONST_65535) &&
CONST_65 > (symC0[64] & CONST_65535) &&
CONST_97 > (symC0[64] & CONST_65535) &&
(symC0[64] & CONST_65535) != CONST_93 &&
(symC0[64] & CONST_65535) != CONST_91 &&
(symC0[64] & CONST_65535) != CONST_63 &&
(symC0[64] & CONST_65535) != CONST_62 &&
(symC0[64] & CONST_65535) != CONST_61 &&
(symC0[64] & CONST_65535) != CONST_60 &&
(symC0[64] & CONST_65535) != CONST_47 &&
(symC0[64] & CONST_65535) != CONST_45 &&
(symC0[64] & CONST_65535) != CONST_39 &&
(symC0[64] & CONST_65535) != CONST_34 &&
(symC0[64] & CONST_65535) != CONST_33 &&
(symC0[64] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57
### PCs: total:42 sat:28 unsat:14

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0[58] & CONST_65535) <= CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0[58] & CONST_65535) <= CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) <= CONST_57
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsle (bvand #x000000000000ffff symC0) #x0000000000000039))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) <= CONST_57 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[52] & CONST_65535) != CONST_32 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_48 <= (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) <= CONST_57
### PCs: total:43 sat:29 unsat:14

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[52] & CONST_65535) <= CONST_57 &&
CONST_48 <= (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_97 > (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) != CONST_93 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) == CONST_46 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) == CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000002e))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) == CONST_46 -> false

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[52] & CONST_65535) != CONST_32 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_48 <= (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) > CONST_57 &&
(symC0[52] & CONST_65535) == CONST_46
### PCs: total:44 sat:29 unsat:15

--------original PC------------0
original pc constraint # = 17
(symC0[52] & CONST_65535) != CONST_46 &&
(symC0[52] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_97 > (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) != CONST_93 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[52] & CONST_65535) != CONST_46 &&
(symC0[52] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_97 > (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) != CONST_93 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[52] & CONST_65535) != CONST_32 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_48 <= (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) > CONST_57 &&
(symC0[52] & CONST_65535) != CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[52] & CONST_65535) != CONST_32 &&
(symC0[52] & CONST_65535) != CONST_33 &&
(symC0[52] & CONST_65535) != CONST_34 &&
(symC0[52] & CONST_65535) != CONST_39 &&
(symC0[52] & CONST_65535) != CONST_45 &&
(symC0[52] & CONST_65535) != CONST_47 &&
(symC0[52] & CONST_65535) != CONST_60 &&
(symC0[52] & CONST_65535) != CONST_61 &&
(symC0[52] & CONST_65535) != CONST_62 &&
(symC0[52] & CONST_65535) != CONST_63 &&
(symC0[52] & CONST_65535) != CONST_91 &&
(symC0[52] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[52] & CONST_65535) &&
CONST_65 > (symC0[52] & CONST_65535) &&
CONST_48 <= (symC0[52] & CONST_65535) &&
(symC0[52] & CONST_65535) > CONST_57 &&
(symC0[52] & CONST_65535) != CONST_46 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) != CONST_46
### PCs: total:45 sat:30 unsat:15

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_46 &&
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) == CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000005f))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) == CONST_95 -> false

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) == CONST_95
### PCs: total:46 sat:30 unsat:16

--------original PC------------0
original pc constraint # = 17
(symC0[58] & CONST_65535) != CONST_95 &&
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_95 &&
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) != CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) != CONST_95 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) != CONST_95
### PCs: total:47 sat:31 unsat:16

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_95 &&
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) != CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003a)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 <= (symC0 & CONST_65535) &&
(symC0 & CONST_65535) > CONST_57 &&
(symC0 & CONST_65535) != CONST_58 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[59] & CONST_65535) != CONST_32 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_48 <= (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) > CONST_57 &&
(symC0[59] & CONST_65535) != CONST_58
### PCs: total:48 sat:32 unsat:16

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[59] & CONST_65535) != CONST_58 &&
(symC0[59] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_97 > (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) != CONST_93 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0[59] & CONST_65535) == CONST_58 &&
(symC0[59] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_97 > (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) != CONST_93 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[59] & CONST_65535) == CONST_58 &&
(symC0[59] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_97 > (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) != CONST_93 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[59] & CONST_65535) != CONST_32 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_48 <= (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) > CONST_57 &&
(symC0[59] & CONST_65535) == CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsle #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (bvsgt (bvand #x000000000000ffff symC0) #x0000000000000039))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000003a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[59] & CONST_65535) != CONST_32 &&
(symC0[59] & CONST_65535) != CONST_33 &&
(symC0[59] & CONST_65535) != CONST_34 &&
(symC0[59] & CONST_65535) != CONST_39 &&
(symC0[59] & CONST_65535) != CONST_45 &&
(symC0[59] & CONST_65535) != CONST_47 &&
(symC0[59] & CONST_65535) != CONST_60 &&
(symC0[59] & CONST_65535) != CONST_61 &&
(symC0[59] & CONST_65535) != CONST_62 &&
(symC0[59] & CONST_65535) != CONST_63 &&
(symC0[59] & CONST_65535) != CONST_91 &&
(symC0[59] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[59] & CONST_65535) &&
CONST_65 > (symC0[59] & CONST_65535) &&
CONST_48 <= (symC0[59] & CONST_65535) &&
(symC0[59] & CONST_65535) > CONST_57 &&
(symC0[59] & CONST_65535) == CONST_58 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) != CONST_32 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_48 <= (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) > CONST_57 &&
(symC0[58] & CONST_65535) == CONST_58
### PCs: total:49 sat:33 unsat:16

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[58] & CONST_65535) == CONST_58 &&
(symC0[58] & CONST_65535) > CONST_57 &&
CONST_48 <= (symC0[58] & CONST_65535) &&
CONST_65 > (symC0[58] & CONST_65535) &&
CONST_97 > (symC0[58] & CONST_65535) &&
(symC0[58] & CONST_65535) != CONST_93 &&
(symC0[58] & CONST_65535) != CONST_91 &&
(symC0[58] & CONST_65535) != CONST_63 &&
(symC0[58] & CONST_65535) != CONST_62 &&
(symC0[58] & CONST_65535) != CONST_61 &&
(symC0[58] & CONST_65535) != CONST_60 &&
(symC0[58] & CONST_65535) != CONST_47 &&
(symC0[58] & CONST_65535) != CONST_45 &&
(symC0[58] & CONST_65535) != CONST_39 &&
(symC0[58] & CONST_65535) != CONST_34 &&
(symC0[58] & CONST_65535) != CONST_33 &&
(symC0[58] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0 & CONST_65535) == CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0 & CONST_65535) == CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) == CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000002e))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) == CONST_46 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[46] & CONST_65535) != CONST_32 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_48 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) == CONST_46
### PCs: total:50 sat:34 unsat:16

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[46] & CONST_65535) == CONST_46 &&
CONST_48 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_97 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) != CONST_93 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 16
(symC0[46] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_97 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) != CONST_93 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 16
(symC0[46] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_97 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) != CONST_93 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 16
(symC0[46] & CONST_65535) != CONST_32 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_48 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) != CONST_46
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 16
(symC0[46] & CONST_65535) != CONST_32 &&
(symC0[46] & CONST_65535) != CONST_33 &&
(symC0[46] & CONST_65535) != CONST_34 &&
(symC0[46] & CONST_65535) != CONST_39 &&
(symC0[46] & CONST_65535) != CONST_45 &&
(symC0[46] & CONST_65535) != CONST_47 &&
(symC0[46] & CONST_65535) != CONST_60 &&
(symC0[46] & CONST_65535) != CONST_61 &&
(symC0[46] & CONST_65535) != CONST_62 &&
(symC0[46] & CONST_65535) != CONST_63 &&
(symC0[46] & CONST_65535) != CONST_91 &&
(symC0[46] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[46] & CONST_65535) &&
CONST_65 > (symC0[46] & CONST_65535) &&
CONST_48 > (symC0[46] & CONST_65535) &&
(symC0[46] & CONST_65535) != CONST_46 -> true

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46
### PCs: total:51 sat:35 unsat:16

string analysis: SPC # = 0
NPC constraint # = 16
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) != CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) == CONST_95 &&
(symC0 & CONST_65535) != CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_46 &&
(symC0 & CONST_65535) == CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000005f))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_46 &&
(symC0 & CONST_65535) == CONST_95 -> false

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) == CONST_95
### PCs: total:52 sat:35 unsat:17

--------original PC------------0
original pc constraint # = 17
(symC0[0] & CONST_65535) != CONST_95 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_95 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) != CONST_95
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005f)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) != CONST_95 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) != CONST_95
### PCs: total:53 sat:36 unsat:17

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_95 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) != CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0 & CONST_65535) != CONST_58 &&
(symC0 & CONST_65535) != CONST_46 &&
CONST_48 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_97 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_93 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_46 &&
(symC0 & CONST_65535) != CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003a)))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0 & CONST_65535) != CONST_32 &&
(symC0 & CONST_65535) != CONST_33 &&
(symC0 & CONST_65535) != CONST_34 &&
(symC0 & CONST_65535) != CONST_39 &&
(symC0 & CONST_65535) != CONST_45 &&
(symC0 & CONST_65535) != CONST_47 &&
(symC0 & CONST_65535) != CONST_60 &&
(symC0 & CONST_65535) != CONST_61 &&
(symC0 & CONST_65535) != CONST_62 &&
(symC0 & CONST_65535) != CONST_63 &&
(symC0 & CONST_65535) != CONST_91 &&
(symC0 & CONST_65535) != CONST_93 &&
CONST_97 > (symC0 & CONST_65535) &&
CONST_65 > (symC0 & CONST_65535) &&
CONST_48 > (symC0 & CONST_65535) &&
(symC0 & CONST_65535) != CONST_46 &&
(symC0 & CONST_65535) != CONST_58 -> true

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) != CONST_58
### PCs: total:54 sat:37 unsat:17

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_58 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--------original PC------------0
original pc constraint # = 17
(symC0[0] & CONST_65535) == CONST_58 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
--- end printing original PC ---
--------begin after splitting------------
originalPC constraint # = 17
(symC0[0] & CONST_65535) == CONST_58 &&
(symC0[0] & CONST_65535) != CONST_46 &&
CONST_48 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_97 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_93 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_32
concolicPC constraint # = 0
simplePC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) == CONST_58
--------end after splitting------------
Z3bitvector using 64-bit bitvectors.
Allowed [min,max] values: [-9223372036854775808,9223372036854775807].
Using floating point for reals: no


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
(declare-fun symC0 () (_ BitVec 64))
(assert (bvsge symC0 #x0000000000000000))
(assert (bvsle symC0 #x000000000000ffff))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000020)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000021)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000022)))
(assert (not (= (bvand #x000000000000ffff symC0) #x0000000000000027)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003c)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003d)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003e)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000003f)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005b)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000005d)))
(assert (bvsgt #x0000000000000061 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000041 (bvand #x000000000000ffff symC0)))
(assert (bvsgt #x0000000000000030 (bvand #x000000000000ffff symC0)))
(assert (not (= (bvand #x000000000000ffff symC0) #x000000000000002e)))
(assert (= (bvand #x000000000000ffff symC0) #x000000000000003a))


Solving time of z3 bitvector is 0 ms
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


numeric PC: constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) == CONST_58 -> false

string analysis: SPC # = 0
NPC constraint # = 17
(symC0[0] & CONST_65535) != CONST_32 &&
(symC0[0] & CONST_65535) != CONST_33 &&
(symC0[0] & CONST_65535) != CONST_34 &&
(symC0[0] & CONST_65535) != CONST_39 &&
(symC0[0] & CONST_65535) != CONST_45 &&
(symC0[0] & CONST_65535) != CONST_47 &&
(symC0[0] & CONST_65535) != CONST_60 &&
(symC0[0] & CONST_65535) != CONST_61 &&
(symC0[0] & CONST_65535) != CONST_62 &&
(symC0[0] & CONST_65535) != CONST_63 &&
(symC0[0] & CONST_65535) != CONST_91 &&
(symC0[0] & CONST_65535) != CONST_93 &&
CONST_97 > (symC0[0] & CONST_65535) &&
CONST_65 > (symC0[0] & CONST_65535) &&
CONST_48 > (symC0[0] & CONST_65535) &&
(symC0[0] & CONST_65535) != CONST_46 &&
(symC0[0] & CONST_65535) == CONST_58
### PCs: total:55 sat:37 unsat:18


====================================================== coverage statistics

-------------------------------------------- class coverage ------------------------------------------------
bytecode            line                basic-block         branch              methods             location
------------------------------------------------------------------------------------------------------------
 -                   -                   -                   -                   -                  ch.nunnisoft.xml.parser.ContentHandler
0.43 (3/7)          0.50 (2/4)          0.50 (2/4)           -                  0.50 (1/2)          ch.nunnisoft.xml.parser.LogicError
  0.00 (0/4)          0.00 (0/2)          0.00 (0/2)           -                   -                  <init>(String)
                                                                                    at ch.nunnisoft.xml.parser.LogicError.<init>(LogicError.java:38) 
                                                                                    .. ch.nunnisoft.xml.parser.LogicError.<init>(LogicError.java:39) 
  1.00 (3/3)          1.00 (2/2)          1.00 (2/2)           -                   -                  <init>()
0.26 (184/721)      0.17 (31/185)       0.21 (43/209)       0.38 (10/26)        0.17 (7/42)         ch.nunnisoft.xml.parser.NunniJXMLParser
  0.00 (0/42)         0.00 (0/15)         0.00 (0/3)           -                   -                  <init>()
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.<init>(NunniJXMLParser.java:67) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.<init>(NunniJXMLParser.java:69) 
  0.00 (0/35)         0.00 (0/6)          0.00 (0/14)         0.00 (0/1)           -                  addArg()
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.addArg(NunniJXMLParser.java:462) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.addArg(NunniJXMLParser.java:467) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.addArg(NunniJXMLParser.java:464) 
  0.00 (0/14)         0.00 (0/3)          0.00 (0/2)           -                   -                  cdataLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdataLiteral(NunniJXMLParser.java:253) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.cdataLiteral(NunniJXMLParser.java:255) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  cdataaLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdataaLiteral(NunniJXMLParser.java:246) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.cdataaLiteral(NunniJXMLParser.java:247) 
  0.00 (0/25)         0.00 (0/4)          0.00 (0/12)         0.00 (0/1)           -                  cdataaOpensqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdataaOpensqbracket(NunniJXMLParser.java:237) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.cdataaOpensqbracket(NunniJXMLParser.java:240) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.cdataaOpensqbracket(NunniJXMLParser.java:238) 
  0.00 (0/2)          0.00 (0/1)          0.00 (0/1)           -                   -                  cdatabClosesqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdatabClosesqbracket(NunniJXMLParser.java:261) 
  0.00 (0/2)          0.00 (0/1)          0.00 (0/1)           -                   -                  cdatacClosesqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdatacClosesqbracket(NunniJXMLParser.java:277) 
  0.00 (0/26)         0.00 (0/5)          0.00 (0/3)           -                   -                  cdatacLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdatacLiteral(NunniJXMLParser.java:267) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.cdatacLiteral(NunniJXMLParser.java:271) 
  0.00 (0/2)          0.00 (0/1)          0.00 (0/1)           -                   -                  cdatadClosebracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.cdatadClosebracket(NunniJXMLParser.java:283) 
  0.00 (0/33)         0.00 (0/8)          0.00 (0/12)         0.00 (0/2)           -                  closetagnameClosebracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameClosebracket(NunniJXMLParser.java:348) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameClosebracket(NunniJXMLParser.java:355) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameClosebracket(NunniJXMLParser.java:348) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameClosebracket(NunniJXMLParser.java:352) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  closetagnameLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameLiteral(NunniJXMLParser.java:362) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.closetagnameLiteral(NunniJXMLParser.java:363) 
  0.00 (0/11)         0.00 (0/3)          0.00 (0/3)           -                   -                  commentaDTD(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.commentaDTD(NunniJXMLParser.java:296) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.commentaDTD(NunniJXMLParser.java:300) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  commentaOpensqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.commentaOpensqbracket(NunniJXMLParser.java:289) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.commentaOpensqbracket(NunniJXMLParser.java:290) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  dqopenLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.dqopenLiteral(NunniJXMLParser.java:435) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.dqopenLiteral(NunniJXMLParser.java:436) 
  0.00 (0/4)          0.00 (0/2)          0.00 (0/2)           -                   -                  dqopenQuote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.dqopenQuote(NunniJXMLParser.java:442) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.dqopenQuote(NunniJXMLParser.java:443) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  dtdaLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.dtdaLiteral(NunniJXMLParser.java:230) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.dtdaLiteral(NunniJXMLParser.java:231) 
  0.00 (0/25)         0.00 (0/4)          0.00 (0/12)         0.00 (0/1)           -                  dtdaWhitespace(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.dtdaWhitespace(NunniJXMLParser.java:221) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.dtdaWhitespace(NunniJXMLParser.java:224) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.dtdaWhitespace(NunniJXMLParser.java:222) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  equalDquote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.equalDquote(NunniJXMLParser.java:414) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.equalDquote(NunniJXMLParser.java:415) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  equalSquote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.equalSquote(NunniJXMLParser.java:407) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.equalSquote(NunniJXMLParser.java:408) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  lvalueLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.lvalueLiteral(NunniJXMLParser.java:400) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.lvalueLiteral(NunniJXMLParser.java:401) 
  0.00 (0/15)         0.00 (0/5)          0.00 (0/4)          0.00 (0/1)           -                  preOpenbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.preOpenbracket(NunniJXMLParser.java:200) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.preOpenbracket(NunniJXMLParser.java:205) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.preOpenbracket(NunniJXMLParser.java:200) 
  0.00 (0/16)         0.00 (0/4)          0.00 (0/4)           -                   -                  pretagstartLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.pretagstartLiteral(NunniJXMLParser.java:212) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.pretagstartLiteral(NunniJXMLParser.java:215) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  reset()
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.reset(NunniJXMLParser.java:88) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  rvalueLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.rvalueLiteral(NunniJXMLParser.java:449) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.rvalueLiteral(NunniJXMLParser.java:450) 
  0.00 (0/4)          0.00 (0/2)          0.00 (0/2)           -                   -                  rvalueQuote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.rvalueQuote(NunniJXMLParser.java:456) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.rvalueQuote(NunniJXMLParser.java:457) 
  0.00 (0/16)         0.00 (0/3)          0.00 (0/5)           -                   -                  singletagClosebracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.singletagClosebracket(NunniJXMLParser.java:473) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.singletagClosebracket(NunniJXMLParser.java:475) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  sqopenLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.sqopenLiteral(NunniJXMLParser.java:421) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.sqopenLiteral(NunniJXMLParser.java:422) 
  0.00 (0/4)          0.00 (0/2)          0.00 (0/2)           -                   -                  sqopenQuote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.sqopenQuote(NunniJXMLParser.java:428) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.sqopenQuote(NunniJXMLParser.java:429) 
  0.00 (0/11)         0.00 (0/3)          0.00 (0/3)           -                   -                  tagargsLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.tagargsLiteral(NunniJXMLParser.java:391) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.tagargsLiteral(NunniJXMLParser.java:393) 
  0.00 (0/32)         0.00 (0/7)          0.00 (0/9)          0.00 (0/2)           -                  tagnameClosebracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.tagnameClosebracket(NunniJXMLParser.java:370) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.tagnameClosebracket(NunniJXMLParser.java:376) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.tagnameClosebracket(NunniJXMLParser.java:370) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/2)           -                   -                  tagnameLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.tagnameLiteral(NunniJXMLParser.java:383) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.tagnameLiteral(NunniJXMLParser.java:384) 
  0.00 (0/16)         0.00 (0/4)          0.00 (0/4)           -                   -                  tagstartLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.tagstartLiteral(NunniJXMLParser.java:338) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.tagstartLiteral(NunniJXMLParser.java:341) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  tagstartSlash(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.tagstartSlash(NunniJXMLParser.java:330) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.tagstartSlash(NunniJXMLParser.java:331) 
  0.00 (0/28)         0.00 (0/5)          0.00 (0/12)         0.00 (0/1)           -                  textEnd(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.textEnd(NunniJXMLParser.java:318) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.textEnd(NunniJXMLParser.java:323) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.textEnd(NunniJXMLParser.java:318) 
  0.00 (0/29)         0.00 (0/5)          0.00 (0/9)          0.00 (0/3)           -                  textLiteral(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.textLiteral(NunniJXMLParser.java:307) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.textLiteral(NunniJXMLParser.java:311) 
                                                                                    N at ch.nunnisoft.xml.parser.NunniJXMLParser.textLiteral(NunniJXMLParser.java:307) 
  0.53 (67/127)       0.30 (14/47)        0.47 (17/36)        0.67 (4/6)           -                  parse(Reader,ContentHandler)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:118) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:164) 
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:169) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:170) 
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:175) 
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:182) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:185) 
                                                                                    F at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:112) 
                                                                                    T at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:168) 
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.parse(NunniJXMLParser.java:173) 
  0.71 (5/7)          0.00 (0/1)          0.75 (3/4)          0.00 (0/1)           -                  isWhiteSpace(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.isWhiteSpace(NunniJXMLParser.java:188) 
                                                                                    T at ch.nunnisoft.xml.parser.NunniJXMLParser.isWhiteSpace(NunniJXMLParser.java:188) 
  0.86 (12/14)        0.60 (3/5)          0.75 (3/4)          0.00 (0/1)           -                  read(Reader)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParser.read(NunniJXMLParser.java:98) 
                                                                                    F at ch.nunnisoft.xml.parser.NunniJXMLParser.read(NunniJXMLParser.java:94) 
  1.00 (3/3)          1.00 (1/1)          1.00 (1/1)           -                   -                  <clinit>()
  1.00 (42/42)        1.00 (15/15)        1.00 (3/3)           -                   -                  <init>(Object)
  1.00 (31/31)        1.00 (7/7)          1.00 (7/7)           -                   -                  initNJAX()
  1.00 (24/24)        1.00 (3/3)          1.00 (9/9)          1.00 (6/6)           -                  isLetterOrDigit(char)
0.19 (14/74)        0.20 (4/20)         0.19 (7/37)         0.00 (0/1)          0.17 (3/18)         ch.nunnisoft.xml.parser.NunniJXMLParserERRORState
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  closebracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.closebracket(NunniJXMLParserERRORState.java:52) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  closesqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.closesqbracket(NunniJXMLParserERRORState.java:62) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  dquote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.dquote(NunniJXMLParserERRORState.java:102) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  end(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.end(NunniJXMLParserERRORState.java:117) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  equal(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.equal(NunniJXMLParserERRORState.java:92) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  escalmatmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.escalmatmark(NunniJXMLParserERRORState.java:72) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  literal(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.literal(NunniJXMLParserERRORState.java:107) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  minus(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.minus(NunniJXMLParserERRORState.java:77) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  openbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.openbracket(NunniJXMLParserERRORState.java:47) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  opensqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.opensqbracket(NunniJXMLParserERRORState.java:57) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  other(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.other(NunniJXMLParserERRORState.java:112) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  questionmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.questionmark(NunniJXMLParserERRORState.java:67) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  slash(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.slash(NunniJXMLParserERRORState.java:87) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  squote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.squote(NunniJXMLParserERRORState.java:97) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  whitespace(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.whitespace(NunniJXMLParserERRORState.java:82) 
  1.00 (3/3)          1.00 (1/1)          1.00 (1/1)           -                   -                  <clinit>()
  1.00 (3/3)          1.00 (1/1)          1.00 (2/2)           -                   -                  <init>()
  1.00 (8/8)          0.67 (2/3)          1.00 (4/4)          0.00 (0/1)           -                  instance()
                                                                                    F at ch.nunnisoft.xml.parser.NunniJXMLParserERRORState.instance(NunniJXMLParserERRORState.java:40) 
0.30 (40/135)       0.20 (8/41)         0.27 (13/48)         -                  0.33 (8/24)         ch.nunnisoft.xml.parser.NunniJXMLParserFSM
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  <init>()
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.<init>(NunniJXMLParserFSM.java:38) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  closebracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.closebracket(NunniJXMLParserFSM.java:58) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.closebracket(NunniJXMLParserFSM.java:59) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  closesqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.closesqbracket(NunniJXMLParserFSM.java:68) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.closesqbracket(NunniJXMLParserFSM.java:69) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  dquote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.dquote(NunniJXMLParserFSM.java:109) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.dquote(NunniJXMLParserFSM.java:110) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  end(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.end(NunniJXMLParserFSM.java:124) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.end(NunniJXMLParserFSM.java:125) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  equal(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.equal(NunniJXMLParserFSM.java:99) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.equal(NunniJXMLParserFSM.java:100) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  escalmatmark(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.escalmatmark(NunniJXMLParserFSM.java:77) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.escalmatmark(NunniJXMLParserFSM.java:78) 
  0.00 (0/4)          0.00 (0/2)          0.00 (0/2)           -                   -                  escalmatmark2(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.escalmatmark2(NunniJXMLParserFSM.java:81) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.escalmatmark2(NunniJXMLParserFSM.java:82) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  minus(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.minus(NunniJXMLParserFSM.java:84) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.minus(NunniJXMLParserFSM.java:85) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  openbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.openbracket(NunniJXMLParserFSM.java:53) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.openbracket(NunniJXMLParserFSM.java:54) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  opensqbracket(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.opensqbracket(NunniJXMLParserFSM.java:63) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.opensqbracket(NunniJXMLParserFSM.java:64) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  questionmark(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.questionmark(NunniJXMLParserFSM.java:73) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.questionmark(NunniJXMLParserFSM.java:74) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  slash(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.slash(NunniJXMLParserFSM.java:94) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.slash(NunniJXMLParserFSM.java:95) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  squote(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.squote(NunniJXMLParserFSM.java:104) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.squote(NunniJXMLParserFSM.java:105) 
  0.00 (0/4)          0.00 (0/1)          0.00 (0/2)           -                   -                  toString()
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.toString(NunniJXMLParserFSM.java:48) 
  0.00 (0/6)          0.00 (0/2)          0.00 (0/2)           -                   -                  whitespace(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.whitespace(NunniJXMLParserFSM.java:89) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserFSM.whitespace(NunniJXMLParserFSM.java:90) 
  0.80 (4/5)          0.00 (0/1)          0.50 (1/2)           -                   -                  parse(Reader,ContentHandler)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.parse(NunniJXMLParserFSM.java:34) 
  0.83 (5/6)          0.50 (1/2)          0.50 (1/2)           -                   -                  literal(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.literal(NunniJXMLParserFSM.java:115) 
  0.83 (5/6)          0.50 (1/2)          0.50 (1/2)           -                   -                  other(char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserFSM.other(NunniJXMLParserFSM.java:120) 
  1.00 (10/10)        1.00 (4/4)          1.00 (3/3)           -                   -                  <init>(Object)
  1.00 (4/4)          1.00 (2/2)          1.00 (1/1)           -                   -                  changeState(NunniJXMLParserState)
  1.00 (4/4)          1.00 (1/1)          1.00 (2/2)           -                   -                  isLetterOrDigit(char)
  1.00 (4/4)          1.00 (1/1)          1.00 (2/2)           -                   -                  isWhiteSpace(char)
  1.00 (4/4)          1.00 (1/1)          1.00 (2/2)           -                   -                  read(Reader)
0.23 (28/121)       0.21 (8/39)         0.22 (15/68)        0.00 (0/1)          0.28 (5/18)         ch.nunnisoft.xml.parser.NunniJXMLParserPREState
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  closebracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.closebracket(NunniJXMLParserPREState.java:59) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.closebracket(NunniJXMLParserPREState.java:60) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  closesqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.closesqbracket(NunniJXMLParserPREState.java:71) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.closesqbracket(NunniJXMLParserPREState.java:72) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  dquote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.dquote(NunniJXMLParserPREState.java:117) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.dquote(NunniJXMLParserPREState.java:118) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  end(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.end(NunniJXMLParserPREState.java:135) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.end(NunniJXMLParserPREState.java:136) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  equal(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.equal(NunniJXMLParserPREState.java:105) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.equal(NunniJXMLParserPREState.java:106) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  escalmatmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.escalmatmark(NunniJXMLParserPREState.java:83) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.escalmatmark(NunniJXMLParserPREState.java:84) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  minus(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.minus(NunniJXMLParserPREState.java:89) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.minus(NunniJXMLParserPREState.java:90) 
  0.00 (0/15)         0.00 (0/7)          0.00 (0/8)           -                   -                  openbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.openbracket(NunniJXMLParserPREState.java:48) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.openbracket(NunniJXMLParserPREState.java:55) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  opensqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.opensqbracket(NunniJXMLParserPREState.java:65) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.opensqbracket(NunniJXMLParserPREState.java:66) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  questionmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.questionmark(NunniJXMLParserPREState.java:77) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.questionmark(NunniJXMLParserPREState.java:78) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  slash(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.slash(NunniJXMLParserPREState.java:99) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.slash(NunniJXMLParserPREState.java:100) 
  0.00 (0/7)          0.00 (0/2)          0.00 (0/4)           -                   -                  squote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.squote(NunniJXMLParserPREState.java:111) 
                                                                                    .. ch.nunnisoft.xml.parser.NunniJXMLParserPREState.squote(NunniJXMLParserPREState.java:112) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  whitespace(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.whitespace(NunniJXMLParserPREState.java:95) 
  1.00 (3/3)          1.00 (1/1)          1.00 (1/1)           -                   -                  <clinit>()
  1.00 (3/3)          1.00 (1/1)          1.00 (2/2)           -                   -                  <init>()
  1.00 (8/8)          0.67 (2/3)          1.00 (4/4)          0.00 (0/1)           -                  instance()
                                                                                    F at ch.nunnisoft.xml.parser.NunniJXMLParserPREState.instance(NunniJXMLParserPREState.java:40) 
  1.00 (7/7)          1.00 (2/2)          1.00 (4/4)           -                   -                  literal(NunniJXMLParserFSM,char)
  1.00 (7/7)          1.00 (2/2)          1.00 (4/4)           -                   -                  other(NunniJXMLParserFSM,char)
0.17 (3/18)         0.06 (1/16)         0.12 (2/17)          -                  0.06 (1/16)         ch.nunnisoft.xml.parser.NunniJXMLParserState
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  closebracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.closebracket(NunniJXMLParserState.java:37) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  closesqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.closesqbracket(NunniJXMLParserState.java:39) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  dquote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.dquote(NunniJXMLParserState.java:47) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  end(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.end(NunniJXMLParserState.java:50) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  equal(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.equal(NunniJXMLParserState.java:45) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  escalmatmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.escalmatmark(NunniJXMLParserState.java:41) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  literal(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.literal(NunniJXMLParserState.java:48) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  minus(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.minus(NunniJXMLParserState.java:42) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  openbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.openbracket(NunniJXMLParserState.java:36) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  opensqbracket(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.opensqbracket(NunniJXMLParserState.java:38) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  other(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.other(NunniJXMLParserState.java:49) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  questionmark(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.questionmark(NunniJXMLParserState.java:40) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  slash(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.slash(NunniJXMLParserState.java:44) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  squote(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.squote(NunniJXMLParserState.java:46) 
  0.00 (0/1)          0.00 (0/1)          0.00 (0/1)           -                   -                  whitespace(NunniJXMLParserFSM,char)
                                                                                    at ch.nunnisoft.xml.parser.NunniJXMLParserState.whitespace(NunniJXMLParserState.java:43) 
  1.00 (3/3)          1.00 (1/1)          1.00 (2/2)           -                   -                  <init>()

------------------------------------------------------------------------------------------------------------
0.25 (272/1076)     0.18 (54/305)       0.21 (82/383)       0.36 (10/28)        0.21 (25/120)       1.00 (6/6)         total

====================================================== results
no errors detected

====================================================== statistics
elapsed time:       00:00:00
states:             new=20,visited=0,backtracked=20,end=10
search:             maxDepth=7,constraints=0
choice generators:  thread=1 (signal=0,lock=1,sharedRef=0,threadApi=0,reschedule=0), data=10
heap:               new=678,released=354,maxLive=444,gcCycles=15
instructions:       4712
max memory:         479MB
loaded code:        classes=88,methods=2108

====================================================== search finished: 4/14/22 1:21 PM
