package com.html5parser.tokenizerStates;

import com.html5parser.classes.ParserContext;
import com.html5parser.classes.TokenizerContext;
import com.html5parser.classes.TokenizerState;
import com.html5parser.factories.TokenizerStateFactory;
import com.html5parser.interfaces.ITokenizerState;

public class Bogus_comment_state implements ITokenizerState {

	public ParserContext process(ParserContext context) {
		TokenizerStateFactory factory = TokenizerStateFactory.getInstance();
		TokenizerContext tokenizerContext = context.getTokenizerContext();
		int currentChar = tokenizerContext.getCurrentInputCharacter();
		
		
			context.addParseEvent("8.2.4.44", currentChar);

		/*
		 * Consume every character up to and including the first U+003E
		 * GREATER-THAN SIGN character (>) or the end of the file (EOF),
		 * whichever comes first. Emit a comment token whose data is the
		 * concatenation of all the characters starting from and including the
		 * character that caused the state machine to switch into the bogus
		 * comment state, up to and including the character immediately before
		 * the last consumed character (i.e. up to the character just before the
		 * U+003E or EOF character), but with any U+0000 NULL characters
		 * replaced by U+FFFD REPLACEMENT CHARACTER characters. (If the comment
		 * was started by the end of the file (EOF), the token is empty.
		 * Similarly, the token is empty if it was generated by the string
		 * "<!>".)
		 * 
		 * Switch to the data state.
		 * 
		 * If the end of the file was reached, reconsume the EOF character.
		 */

		switch (tokenizerContext.getCurrentASCIICharacter()) {
		// U+0000 NULL characters replaced by U+FFFD
		case NULL:
			tokenizerContext.getCurrentToken().appendValue(0xFFFD);
			break;

		// If the end of the file was reached, reconsume the EOF character.
		case EOF:
			tokenizerContext.setFlagEmitToken(true);
			tokenizerContext.setNextState(factory
					.getState(TokenizerState.Data_state));
			tokenizerContext.setFlagReconsumeCurrentInputCharacter(true);
			break;
		case GREATER_THAN_SIGN:
			tokenizerContext.setFlagEmitToken(true);
			tokenizerContext.setNextState(factory
					.getState(TokenizerState.Data_state));
			// the token is empty if it was generated by the string "<!>"
			// Token token = tokenizerContext.getCurrentToken();
			// if (!token.getValue().equals(""))
			// token.appendValue(0x003E);
			break;

		// Consume every character
		default:
			tokenizerContext.getCurrentToken().appendValue(currentChar);
			break;
		}

		context.setTokenizerContext(tokenizerContext);
		return context;
	}
}